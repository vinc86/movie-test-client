[{"/home/dci-st143/movie-test/movie-test-client/src/index.js":"1","/home/dci-st143/movie-test/movie-test-client/src/graphql/index.js":"2","/home/dci-st143/movie-test/movie-test-client/src/App.jsx":"3","/home/dci-st143/movie-test/movie-test-client/src/components/Navbar/Navbar.jsx":"4","/home/dci-st143/movie-test/movie-test-client/src/components/Footer/Footer.jsx":"5","/home/dci-st143/movie-test/movie-test-client/src/components/Home/Home.jsx":"6","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/DisplayMovies.jsx":"7","/home/dci-st143/movie-test/movie-test-client/src/components/Auth/Login/Login.jsx":"8","/home/dci-st143/movie-test/movie-test-client/src/components/Auth/Register/Register.jsx":"9","/home/dci-st143/movie-test/movie-test-client/src/graphql/queries.js":"10","/home/dci-st143/movie-test/movie-test-client/src/context/MovieContext.js":"11","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/MovieCard.jsx":"12","/home/dci-st143/movie-test/movie-test-client/src/components/NotFound/NotFound.jsx":"13","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/AddMovie.jsx":"14","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/MovieDetails.jsx":"15","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/StarsRating.jsx":"16"},{"size":291,"mtime":1608594033018,"results":"17","hashOfConfig":"18"},{"size":188,"mtime":1608567649098,"results":"19","hashOfConfig":"18"},{"size":2512,"mtime":1608825625442,"results":"20","hashOfConfig":"18"},{"size":2007,"mtime":1608488097201,"results":"21","hashOfConfig":"18"},{"size":192,"mtime":1603008632662,"results":"22","hashOfConfig":"18"},{"size":687,"mtime":1608805110534,"results":"23","hashOfConfig":"18"},{"size":2851,"mtime":1608827898329,"results":"24","hashOfConfig":"18"},{"size":3132,"mtime":1608713741161,"results":"25","hashOfConfig":"18"},{"size":3441,"mtime":1608643453031,"results":"26","hashOfConfig":"18"},{"size":2260,"mtime":1608981830288,"results":"27","hashOfConfig":"18"},{"size":107,"mtime":1608042785185,"results":"28","hashOfConfig":"18"},{"size":1399,"mtime":1608403066612,"results":"29","hashOfConfig":"18"},{"size":267,"mtime":1608230996675,"results":"30","hashOfConfig":"18"},{"size":4193,"mtime":1608827078216,"results":"31","hashOfConfig":"18"},{"size":2806,"mtime":1608900091840,"results":"32","hashOfConfig":"18"},{"size":1743,"mtime":1608982100695,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"z9dipu",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/dci-st143/movie-test/movie-test-client/src/index.js",[],["75","76"],"/home/dci-st143/movie-test/movie-test-client/src/graphql/index.js",[],"/home/dci-st143/movie-test/movie-test-client/src/App.jsx",["77","78","79"],"import React, { useEffect, useState } from 'react'\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Home from './components/Home/Home';\nimport Navbar from './components/Navbar/Navbar'\nimport Login from './components/Auth/Login/Login'\nimport Register from './components/Auth/Register/Register'\nimport Footer from \"./components/Footer/Footer\";\nimport \"./styles/main.css\"\nimport DisplayMovies from './components/Movies/DisplayMovies';\nimport MovieContext from './context/MovieContext';\nimport NotFound from './components/NotFound/NotFound';\nimport AddMovie from './components/Movies/AddMovie';\nimport { useQuery } from '@apollo/client';\nimport { GET_USERS } from './graphql/queries';\nimport MovieDetails from './components/Movies/MovieDetails';\n\n\n\nexport default function App() {\n\n   \n    const [errorMessage, setErrorMessage] = useState();\n    const [registered, setRegistered] =useState(false)\n    const [users, setUsers] = useState();\n    const [userToken, setUserToken] = useState()\n    const [currentUserId, setCurrentUserId] = useState()\n    \n    \n    \n    useEffect(()=>{\n        const token = localStorage.getItem(\"token\")\n        const userId = localStorage.getItem(\"currentUserId\")\n        setUserToken(token);\n        setCurrentUserId(userId)\n    },[])\n    \n    const {loading, data } = useQuery(GET_USERS)\n    let getAllUsers = null;\n    \n    /* if(!loading){\n     getAllUsers = data.getAllUsers;\n    } */\n    \n   \n   \n    const values = {\n        currentUserId,\n        getAllUsers,\n        errorMessage,\n        setErrorMessage,\n        registered,\n        setRegistered,\n        userToken,\n        data \n    }\n\n    return (\n            <MovieContext.Provider value={values}>\n                <Router>\n                    <Navbar />\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                            {userToken && <Route path=\"/movies\" component={DisplayMovies} />}\n                            {userToken && <Route path=\"/add\" component={AddMovie} />}\n                            {userToken && <Route path=\"/movie/:id\" component={MovieDetails} />}\n                            <Route exact path=\"/login\" component={Login} />\n                            <Route exact  path=\"/register\" component={Register} />\n                            <Route component={NotFound}/>\n                        </Switch>\n                        <Footer />\n                </Router>  \n            </MovieContext.Provider>\n    )\n}\n","/home/dci-st143/movie-test/movie-test-client/src/components/Navbar/Navbar.jsx",["80","81"],"import React, { useState, useContext} from \"react\";\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\nimport MovieContext from \"../../context/MovieContext\";\nimport Bars from \"../../svg/bars-solid.svg\";\nimport Times from \"../../svg/times-solid.svg\";\nimport \"./navbar.css\";\n\nexport default function Navbar() {\n  const {userToken} = useContext(MovieContext);\n  let [openNav, setOpenNav] = useState(false);\n  \n  let menuClass = \"menu-list \";\n  menuClass += openNav && \"open\";\n\n  const handleMenu = () => {\n    setOpenNav(!openNav);\n  };\n\n  const handleLogOut =()=>{\n    localStorage.clear();\n    window.location.replace(\"/\")\n    \n  }\n  return (\n    <div>\n      <header>\n        <div onClick={handleMenu} className=\"menu\">\n          <img style={{filter: \"invert(100%)\"}} src={Bars} alt=\"bars\" width=\"20\" />\n        </div>\n        <div className=\"logo\">\n          <h1>\n            <Link to=\"/\">The Movie Client</Link>\n          </h1>\n        </div>\n        <nav>\n          <ul className={menuClass}>\n            {userToken && \n              <>\n                <li>\n                  <Link onClick={handleMenu} to=\"/movies\">Movies</Link>\n                </li>\n                <li>\n                  <Link onClick={handleMenu} to=\"/add\">Add Movie</Link>\n                </li>\n              </>\n            }\n            {!userToken ? (\n              <>\n                <li>\n                  <Link onClick={handleMenu} to=\"/login\">Login</Link>\n                </li>\n                <li>\n                  <Link onClick={handleMenu} to=\"/register\">Register</Link>\n                </li>\n              </>\n            ):( \n              <li>\n                <button onClick={()=>handleLogOut()} className=\"btn-logout\" to=\"/\">Logout</button>\n              </li>\n            )}\n            <li onClick={handleMenu} className=\"close\">\n              <img style={{filter: \"invert(100%)\"}} src={Times} width=\"20\" alt=\"times\" />\n            </li>\n          </ul>\n        </nav>\n      </header>\n    </div>\n  );\n}\n","/home/dci-st143/movie-test/movie-test-client/src/components/Footer/Footer.jsx",[],"/home/dci-st143/movie-test/movie-test-client/src/components/Home/Home.jsx",[],"/home/dci-st143/movie-test/movie-test-client/src/components/Movies/DisplayMovies.jsx",[],"/home/dci-st143/movie-test/movie-test-client/src/components/Auth/Login/Login.jsx",["82","83","84","85"],"import { useMutation } from '@apollo/client';\nimport Axios from 'axios'\nimport React, { useState, useContext, useEffect } from 'react'\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport MovieContext from '../../../context/MovieContext';\nimport { LOGIN } from '../../../graphql/queries';\n\n\nimport \"../auth.css\"\n\nexport default function Login() {\n    \n    const history = useHistory()\n    const [credentials, setCredentials] = useState({})\n    const [welcomeMessage, setWelcomeMessage] = useState(\"\")\n    const {errorMessage, setErrorMessage } = useContext(MovieContext);\n    \n    const onChange = (e) => setCredentials({...credentials, [e.target.name]: e.target.value});\n\n    useEffect(()=>{\n        const welcome = localStorage.getItem(\"welcome\");\n        setWelcomeMessage(welcome);\n    },[])\n\n    const [userLogIn, {loginError}] = useMutation(LOGIN,{\n        onCompleted(data){\n            \n            localStorage.setItem(\"token\", data.login.token);\n            localStorage.setItem(\"currentUserId\", data.login.id);\n            window.location.replace(\"/movies\")\n        },\n        onError(error){\n            setErrorMessage(error.message)\n            setTimeout(()=>{setErrorMessage()},3000)\n        }\n    })\n\n    const handleLogin = (e)=>{\n        e.preventDefault();\n        const username = credentials.username;\n        const password = credentials.password;\n        userLogIn({variables:{username, password}})\n        \n    }\n    \n    return (\n        <div className=\"container\">\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-container\">\n                    <h1 style={{color:\"rgb(21, 54, 116)\", textAlign:\"center\"}}>LOGIN</h1>\n                    <form className=\"auth-form\" onSubmit={handleLogin}>\n                        <div className=\"form-group\">\n                            <input className=\"form-input\" required autcomplete=\"off\" onChange={onChange} type=\"text\" id=\"username\" name=\"username\" />\n                            <label className=\"form-label\" htmlFor=\"username\">\n                                <span>Username*</span>\n                            </label>\n                        </div>\n                        <div className=\"form-group\">\n                            <input className=\"form-input\" required autoomplete=\"off\" onChange={onChange} type=\"password\" id=\"password\" name=\"password\" />\n                            <label className=\"form-label\" htmlFor=\"password\">\n                                <span>Password*</span>\n                            </label>\n                        </div>\n                        <div className=\"form-group\">\n                            <button className=\"btn-auth\" type=\"submit\">Login</button>\n                        </div>\n                        <p style={{margin: \"auto\"}}>Not yet registered? <Link style={{color: \"green\"}} to=\"/register\">Register</Link></p>\n                    </form>\n                </div>\n                {errorMessage && <p className =\"errors\">{errorMessage}</p>}\n                {welcomeMessage && <p className =\"welcome\">{welcomeMessage}</p>}\n            </div>\n        </div>\n    )\n}","/home/dci-st143/movie-test/movie-test-client/src/components/Auth/Register/Register.jsx",["86","87","88","89"],"import Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, Redirect, Link } from 'react-router-dom';\nimport {useMutation} from '@apollo/client';\nimport \"../auth.css\"\nimport { REGISTER } from '../../../graphql/queries';\nimport MovieContext from '../../../context/MovieContext';\n\nexport default function Signup() {\n\n    const history = useHistory()\n    const {errorMessage, setErrorMessage, registered, setRegistered} = useContext(MovieContext);\n    const [credentials, setCredentials] = useState({})\n\n    const [userRegister, {registerError}] = useMutation(REGISTER,{\n        onCompleted(user){\n            user && setRegistered(!registered)\n            localStorage.setItem(\"welcome\",\"Now you can login with your new account!\")\n        },\n        onError(error){\n            setErrorMessage(error.message)\n            setTimeout(()=>{setErrorMessage()},3000)\n        }\n    })\n    \n    const onChange = (e) => setCredentials({...credentials, [e.target.name]: e.target.value});\n    \n\n    const handleRegister = (e)=>{\n        e.preventDefault();\n        let username = credentials.username;\n        let password = credentials.password;\n        let confirmPassword = credentials.confirmPassword;\n        userRegister({variables: {username, password, confirmPassword}})\n    }\n    \n    return (\n        <div className=\"container\">\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-container\">\n                    <h1 style={{color:\"rgb(21, 54, 116)\", textAlign:\"center\"}} >REGISTER</h1>\n                    <form onSubmit={handleRegister} className=\"auth-form\">\n                        <div className=\"form-group\">\n                            <input autoComplete=\"off\" required className=\"form-input\" onChange={onChange} type=\"text\" id=\"username\" name=\"username\" />\n                            <label className=\"form-label\" htmlFor=\"username\">\n                                <span>Username*</span> \n                            </label>\n                        </div>\n                        \n                        <div className=\"form-group\">\n                            <input autoComplete=\"off\" required className=\"form-input\" onChange={onChange}type=\"password\" id=\"password\" name=\"password\" />\n                            <label className=\"form-label\" htmlFor=\"password\">\n                                <span>Password*</span> \n                            </label>\n                        </div>\n                        <div className=\"form-group\">\n                            <input autoComplete=\"off\" required className=\"form-input\" onChange={onChange} type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" />\n                            <label className=\"form-label\" htmlFor=\"confirmPassword\">\n                                <span>Confirm Password*</span> \n                            </label>\n                        </div>\n                        <div className=\"form-group\">\n                            <button className=\"btn-auth\" type=\"submit\">Register</button>\n                        </div>\n                        <p style={{margin: \"auto\"}}>Alrady registered? <Link style={{color: \"green\"}} to=\"/login\">Login</Link></p>\n                    </form>\n                </div>\n              {errorMessage && <p className =\"errors\">{errorMessage}</p>}\n            </div>\n            {registered && <Redirect to=\"/login\" />}\n        </div>\n    )\n}","/home/dci-st143/movie-test/movie-test-client/src/graphql/queries.js",[],"/home/dci-st143/movie-test/movie-test-client/src/context/MovieContext.js",[],"/home/dci-st143/movie-test/movie-test-client/src/components/Movies/MovieCard.jsx",["90","91","92"],"import React, { useContext } from 'react'\nimport { Link } from 'react-router-dom';\nimport MovieContext from '../../context/MovieContext';\n\nexport default function MovieCard() {\n    const { movieList } = useContext(MovieContext);\n\n    return (\n        <>\n            {movieList.map(movie => {\n                const {id,name,imageURL,releaseDate,duration,actors,averageRating,reactions} = movie;\n                console.log(imageURL)\n                return(\n                    <div key={id} className=\"main-container\">\n                        <div className=\"bookmark-card\">\n                            <div className=\"title-container\">\n                                <h2 className =\"card-title\">{name}</h2>\n                            </div>\n                            <img className=\"card-image\" src=\"https://images-na.ssl-images-amazon.com/images/I/51AlhsSOmsL._AC_.jpg\" alt=\"movie\"/>\n                           \n                            <div className=\"info\">\n                                <p className =\"released\">Released in <strong>{releaseDate}</strong></p>\n                                <p className =\"rating\">Average rating: {averageRating}</p>\n                                <Link className=\"more\" to =\"/\">More</Link>\n                            </div>\n                        </div>\n                    </div>\n                \n            )\n\n            })}\n        </>\n    )\n}\n",["93","94"],"/home/dci-st143/movie-test/movie-test-client/src/components/NotFound/NotFound.jsx",[],"/home/dci-st143/movie-test/movie-test-client/src/components/Movies/AddMovie.jsx",["95","96","97"],"import { useMutation } from '@apollo/client';\nimport React, { useContext, useState } from 'react'\nimport { useHistory } from 'react-router';\nimport MovieContext from '../../context/MovieContext';\nimport { ADD_MOVIE, GET_MOVIES } from '../../graphql/queries';\n\nexport default function AddMovie() {\n    const {errorMessage, setErrorMessage, currentUserId} = useContext(MovieContext);\n    const [movie, setMovie]= useState({});\n    const [actors, setActors] = useState([])\n    const [message, setMessage] = useState()\n    const history = useHistory()\n    const [addMovie, {loading, onError}] = useMutation(ADD_MOVIE,{\n        onCompleted(data){\n            setMessage(\"Movie added successfully!\")\n        },\n        onError(onError){\n            console.log(onError)\n            setErrorMessage(onError.message)\n            setTimeout(()=>{setErrorMessage()},3000)\n        }\n    })\n    \n    const onChange = (e) => {\n        if(e.target.name !== \"actors\"){\n            setMovie({...movie,userId:currentUserId,[e.target.name]:e.target.value})\n        } else {\n            setActors({...actors,[e.target.name]:e.target.value.split(\",\")})\n        }\n        \n    };\n    const newMovie = {...movie, ...actors};\n   \n    const saveMovie =(e)=>{\n        e.preventDefault();\n        addMovie({variables: {\n            ...newMovie,\n            releaseDate: +newMovie.releaseDate,\n            duration: +newMovie.duration\n            },\n            refetchQueries: [\n                {\n                  query: GET_MOVIES,\n                },\n            ],\n        })\n        \n       \n    }\n\n    return (\n        <div className=\"container\">\n        <div className=\"movie-wrapper\">\n            <div className=\"movie-container\">\n                <h1 style={{color:\"#fff\", textAlign:\"center\"}} >ADD A NEW MOVIE</h1>\n                <form onSubmit={saveMovie} className=\"auth-form\">\n                    <div className=\"form-group\">\n                        <label className =\"movie-label\" htmlFor=\"name\">\n                            Name*\n                        </label>\n                        <input autoComplete=\"off\" required className=\"movie-input\" onChange={onChange} type=\"text\" id=\"name\" name=\"name\" />\n                    </div>\n                        \n                    <div className=\"form-group\">\n                        <label className =\"movie-label\" htmlFor=\"imageURL\">\n                            Image URL*\n                        </label>\n                        <input autoComplete=\"off\" required className=\"movie-input\" onChange={onChange} placeholder=\"E.g.: https://www.image.example.jpg\" type=\"url\" id=\"imageURL\" name=\"imageURL\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className =\"movie-label\" htmlFor=\"releaseDate\">\n                            Release year*\n                        </label>\n                        <input autoComplete=\"off\" required className=\"movie-input\" onChange={onChange} type=\"number\" id=\"releaseDate\" name=\"releaseDate\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className =\"movie-label\" htmlFor=\"duration\">\n                            Duration* (in minutes)\n                        </label>\n                        <input autoComplete=\"off\" required className=\"movie-input\" onChange={onChange} type=\"number\" id=\"duration\" name=\"duration\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className =\"movie-label\" htmlFor=\"actors\">\n                            Actors* (separated by comma)\n                        </label>\n                        <input autoComplete=\"off\" required className=\"movie-input\" onChange={onChange} type=\"text\" id=\"actors\" name=\"actors\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn-auth\" type=\"submit\">Save</button>\n                    </div>\n                </form>\n            </div>\n          {errorMessage && <p className =\"errors\">{errorMessage}</p>}\n          {message && <p className =\"errors\">{message}</p>}\n        </div>\n        \n    </div>\n    )\n}\n","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/MovieDetails.jsx",["98","99","100"],"import { useQuery } from '@apollo/client';\nimport React, { useContext, useState } from 'react'\nimport actorIMG from \"../../svg/user-circle-regular.svg\"\nimport { GET_SELECTED_MOVIE } from '../../graphql/queries';\nimport MovieContext from '../../context/MovieContext';\nimport StarsRating from './StarsRating';\n\nexport default function MovieDetails(props) {\n    const {id} = props.match.params;\n    const { currentUserId} = useContext(MovieContext)\n    const [rating, setRating] = useState()\n    const {loading,error,data} = useQuery(GET_SELECTED_MOVIE,{\n        variables: {\n            id: id\n        }\n    })\n   \n    if(loading){\n        return \"Loading...\";\n        \n    }\n    if(error){\n        return `Error! ${error.message}`\n    }\n\n    if (data){\n\n        const {name,imageURL,releaseDate,duration,actors,averageRating} = data.getSelectedMovie;\n        return (\n            <div className=\"container\">\n                <div key={id} className=\"main-container big\">\n                    <div className=\"bookmark-card\">\n                        <div className=\"title-container\">\n                            <h2 className =\"card-title\">{name}</h2>\n                        </div>\n                        <img className=\"card-image-big\" src={imageURL} alt=\"movie\"/>       \n                        \n                        <div className=\"movie-details\">\n                            <div className=\"detail-box\">\n                                <h3>Release year:</h3>\n                                <p>{releaseDate}</p>\n                            </div>\n                            <div className=\"detail-box\">\n                                <h3>Average rating:</h3>\n                                <p>{averageRating}</p>\n                            </div>\n                            <div className=\"detail-box\">\n                                <h3>Duration:</h3>\n                                <p>{duration} min</p>\n                            </div>\n                        </div>\n                       <StarsRating />\n                    </div>\n                </div>\n                <div className=\"actors-section\">\n                    <h2>Main actors</h2>\n                    <div className=\"actors-container\">\n                        {actors.map(actor => {\n                            return(\n                                <div className=\"actor-box\">\n                                    <div className=\"header\">\n                                        <img className=\"actor-img\" src={actorIMG} alt=\"actor\"/>\n                                    </div>\n                                    <h3>{actor}</h3>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>       \n        )\n\n\n    }\n}\n","/home/dci-st143/movie-test/movie-test-client/src/components/Movies/StarsRating.jsx",["101","102"],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":24,"column":12,"nodeType":"109","messageId":"110","endLine":24,"endColumn":17},{"ruleId":"107","severity":1,"message":"111","line":24,"column":19,"nodeType":"109","messageId":"110","endLine":24,"endColumn":27},{"ruleId":"107","severity":1,"message":"112","line":37,"column":12,"nodeType":"109","messageId":"110","endLine":37,"endColumn":19},{"ruleId":"107","severity":1,"message":"113","line":2,"column":16,"nodeType":"109","messageId":"110","endLine":2,"endColumn":24},{"ruleId":"107","severity":1,"message":"114","line":2,"column":26,"nodeType":"109","messageId":"110","endLine":2,"endColumn":36},{"ruleId":"107","severity":1,"message":"115","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":13},{"ruleId":"107","severity":1,"message":"113","line":4,"column":16,"nodeType":"109","messageId":"110","endLine":4,"endColumn":24},{"ruleId":"107","severity":1,"message":"116","line":13,"column":11,"nodeType":"109","messageId":"110","endLine":13,"endColumn":18},{"ruleId":"107","severity":1,"message":"117","line":25,"column":24,"nodeType":"109","messageId":"110","endLine":25,"endColumn":34},{"ruleId":"107","severity":1,"message":"115","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":13},{"ruleId":"107","severity":1,"message":"118","line":2,"column":29,"nodeType":"109","messageId":"110","endLine":2,"endColumn":38},{"ruleId":"107","severity":1,"message":"116","line":11,"column":11,"nodeType":"109","messageId":"110","endLine":11,"endColumn":18},{"ruleId":"107","severity":1,"message":"119","line":15,"column":27,"nodeType":"109","messageId":"110","endLine":15,"endColumn":40},{"ruleId":"107","severity":1,"message":"120","line":11,"column":53,"nodeType":"109","messageId":"110","endLine":11,"endColumn":61},{"ruleId":"107","severity":1,"message":"121","line":11,"column":62,"nodeType":"109","messageId":"110","endLine":11,"endColumn":68},{"ruleId":"107","severity":1,"message":"122","line":11,"column":83,"nodeType":"109","messageId":"110","endLine":11,"endColumn":92},{"ruleId":"103","replacedBy":"123"},{"ruleId":"105","replacedBy":"124"},{"ruleId":"107","severity":1,"message":"116","line":12,"column":11,"nodeType":"109","messageId":"110","endLine":12,"endColumn":18},{"ruleId":"107","severity":1,"message":"112","line":13,"column":23,"nodeType":"109","messageId":"110","endLine":13,"endColumn":30},{"ruleId":"107","severity":1,"message":"125","line":13,"column":32,"nodeType":"109","messageId":"110","endLine":13,"endColumn":39},{"ruleId":"107","severity":1,"message":"126","line":10,"column":13,"nodeType":"109","messageId":"110","endLine":10,"endColumn":26},{"ruleId":"107","severity":1,"message":"127","line":11,"column":12,"nodeType":"109","messageId":"110","endLine":11,"endColumn":18},{"ruleId":"107","severity":1,"message":"128","line":11,"column":20,"nodeType":"109","messageId":"110","endLine":11,"endColumn":29},{"ruleId":"107","severity":1,"message":"129","line":1,"column":10,"nodeType":"109","messageId":"110","endLine":1,"endColumn":21},{"ruleId":"107","severity":1,"message":"130","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":20},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'users' is assigned a value but never used.","Identifier","unusedVar","'setUsers' is assigned a value but never used.","'loading' is assigned a value but never used.","'Redirect' is defined but never used.","'useHistory' is defined but never used.","'Axios' is defined but never used.","'history' is assigned a value but never used.","'loginError' is assigned a value but never used.","'useEffect' is defined but never used.","'registerError' is assigned a value but never used.","'duration' is assigned a value but never used.","'actors' is assigned a value but never used.","'reactions' is assigned a value but never used.",["131"],["132"],"'onError' is assigned a value but never used.","'currentUserId' is assigned a value but never used.","'rating' is assigned a value but never used.","'setRating' is assigned a value but never used.","'useMutation' is defined but never used.","'RATE_MOVIE' is defined but never used.","no-global-assign","no-unsafe-negation"]